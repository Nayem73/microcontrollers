;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 21-Aug-23 11:04:24 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2816      	GOTO       22
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0003	0x1283      	BCF        STATUS, 5
0x0004	0x1303      	BCF        STATUS, 6
0x0005	0x0823      	MOVF       ___DoICPAddr+1, 0
0x0006	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0007	0x0822      	MOVF       ___DoICPAddr, 0
0x0008	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0009	0x0008      	RETURN
; end of _____DoICP
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x000A	0x2003      	CALL       _____DoICP
0x000B	0x118A      	BCF        PCLATH, 3
0x000C	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x000D	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x000E	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x000F	0x0AA2      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x0010	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x0011	0x0AA3      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x0012	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x0013	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x0014	0x280A      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0015	0x0008      	RETURN
; end of ___CC2DW
_main:
0x0016	0x1283      	BCF        STATUS, 5
0x0017	0x1303      	BCF        STATUS, 6
0x0018	0x01A0      	CLRF       _cnt_time
0x0019	0x01A1      	CLRF       33
;MotorWithLedBlinking.c,3 :: 		void main() {
;MotorWithLedBlinking.c,4 :: 		TRISB = 0x00;
0x001A	0x1683      	BSF        STATUS, 5
0x001B	0x0186      	CLRF       TRISB
;MotorWithLedBlinking.c,5 :: 		portb = 0x00;
0x001C	0x1283      	BCF        STATUS, 5
0x001D	0x0186      	CLRF       PORTB
;MotorWithLedBlinking.c,7 :: 		TRISC = 0xFF;
0x001E	0x30FF      	MOVLW      255
0x001F	0x1683      	BSF        STATUS, 5
0x0020	0x0087      	MOVWF      TRISC
;MotorWithLedBlinking.c,9 :: 		portb.RB2 = 1;
0x0021	0x1283      	BCF        STATUS, 5
0x0022	0x1506      	BSF        PORTB, 2
;MotorWithLedBlinking.c,13 :: 		while(1) {
L_main0:
;MotorWithLedBlinking.c,15 :: 		if (portc.RC0 == 1) {
0x0023	0x1C07      	BTFSS      PORTC, 0
0x0024	0x2878      	GOTO       L_main2
;MotorWithLedBlinking.c,16 :: 		portb.RB0 = 1; //running motor forward
0x0025	0x1406      	BSF        PORTB, 0
;MotorWithLedBlinking.c,17 :: 		portb.RB1 = 0; //with these 2 lines
0x0026	0x1086      	BCF        PORTB, 1
;MotorWithLedBlinking.c,19 :: 		portb.Rb3 = 1;
0x0027	0x1586      	BSF        PORTB, 3
;MotorWithLedBlinking.c,20 :: 		delay_ms(500);
0x0028	0x3006      	MOVLW      6
0x0029	0x00FB      	MOVWF      R11
0x002A	0x3013      	MOVLW      19
0x002B	0x00FC      	MOVWF      R12
0x002C	0x30AD      	MOVLW      173
0x002D	0x00FD      	MOVWF      R13
L_main3:
0x002E	0x0BFD      	DECFSZ     R13, 1
0x002F	0x282E      	GOTO       L_main3
0x0030	0x0BFC      	DECFSZ     R12, 1
0x0031	0x282E      	GOTO       L_main3
0x0032	0x0BFB      	DECFSZ     R11, 1
0x0033	0x282E      	GOTO       L_main3
0x0034	0x0000      	NOP
0x0035	0x0000      	NOP
;MotorWithLedBlinking.c,21 :: 		portb.Rb3 = 0;
0x0036	0x1186      	BCF        PORTB, 3
;MotorWithLedBlinking.c,23 :: 		for (i = 0; i < 400; i++) { // Divide the delay into smaller intervals
0x0037	0x01A4      	CLRF       _i
0x0038	0x01A5      	CLRF       _i+1
L_main4:
0x0039	0x3080      	MOVLW      128
0x003A	0x0625      	XORWF      _i+1, 0
0x003B	0x00F0      	MOVWF      R0
0x003C	0x3080      	MOVLW      128
0x003D	0x3A01      	XORLW      1
0x003E	0x0270      	SUBWF      R0, 0
0x003F	0x1D03      	BTFSS      STATUS, 2
0x0040	0x2843      	GOTO       L__main25
0x0041	0x3090      	MOVLW      144
0x0042	0x0224      	SUBWF      _i, 0
L__main25:
0x0043	0x1803      	BTFSC      STATUS, 0
0x0044	0x2872      	GOTO       L_main5
;MotorWithLedBlinking.c,24 :: 		delay_ms(50); // Delay for 50 ms
0x0045	0x3082      	MOVLW      130
0x0046	0x00FC      	MOVWF      R12
0x0047	0x30DD      	MOVLW      221
0x0048	0x00FD      	MOVWF      R13
L_main7:
0x0049	0x0BFD      	DECFSZ     R13, 1
0x004A	0x2849      	GOTO       L_main7
0x004B	0x0BFC      	DECFSZ     R12, 1
0x004C	0x2849      	GOTO       L_main7
0x004D	0x0000      	NOP
0x004E	0x0000      	NOP
;MotorWithLedBlinking.c,25 :: 		cnt_time += 50;
0x004F	0x3032      	MOVLW      50
0x0050	0x0720      	ADDWF      _cnt_time, 0
0x0051	0x00F1      	MOVWF      R1
0x0052	0x0821      	MOVF       _cnt_time+1, 0
0x0053	0x1803      	BTFSC      STATUS, 0
0x0054	0x3E01      	ADDLW      1
0x0055	0x00F2      	MOVWF      R1+1
0x0056	0x0871      	MOVF       R1, 0
0x0057	0x00A0      	MOVWF      _cnt_time
0x0058	0x0872      	MOVF       R1+1, 0
0x0059	0x00A1      	MOVWF      _cnt_time+1
;MotorWithLedBlinking.c,26 :: 		if (cnt_time == 500) {
0x005A	0x0872      	MOVF       R1+1, 0
0x005B	0x3A01      	XORLW      1
0x005C	0x1D03      	BTFSS      STATUS, 2
0x005D	0x2860      	GOTO       L__main26
0x005E	0x30F4      	MOVLW      244
0x005F	0x0671      	XORWF      R1, 0
L__main26:
0x0060	0x1D03      	BTFSS      STATUS, 2
0x0061	0x2869      	GOTO       L_main8
;MotorWithLedBlinking.c,27 :: 		if (portb.RB3 == 1) {
0x0062	0x1D86      	BTFSS      PORTB, 3
0x0063	0x2866      	GOTO       L_main9
;MotorWithLedBlinking.c,28 :: 		portb.RB3 = 0;
0x0064	0x1186      	BCF        PORTB, 3
;MotorWithLedBlinking.c,29 :: 		} else {
0x0065	0x2867      	GOTO       L_main10
L_main9:
;MotorWithLedBlinking.c,30 :: 		portb.RB3 = 1;
0x0066	0x1586      	BSF        PORTB, 3
;MotorWithLedBlinking.c,31 :: 		}
L_main10:
;MotorWithLedBlinking.c,32 :: 		cnt_time = 0;
0x0067	0x01A0      	CLRF       _cnt_time
0x0068	0x01A1      	CLRF       _cnt_time+1
;MotorWithLedBlinking.c,33 :: 		}
L_main8:
;MotorWithLedBlinking.c,34 :: 		if (portc.RC1 == 1) {
0x0069	0x1C87      	BTFSS      PORTC, 1
0x006A	0x286E      	GOTO       L_main11
;MotorWithLedBlinking.c,35 :: 		portb.RB0 = 0; // Stop motor immediately
0x006B	0x1006      	BCF        PORTB, 0
;MotorWithLedBlinking.c,36 :: 		portb.RB1 = 0;
0x006C	0x1086      	BCF        PORTB, 1
;MotorWithLedBlinking.c,37 :: 		break; // Exit the loop
0x006D	0x2872      	GOTO       L_main5
;MotorWithLedBlinking.c,38 :: 		}
L_main11:
;MotorWithLedBlinking.c,23 :: 		for (i = 0; i < 400; i++) { // Divide the delay into smaller intervals
0x006E	0x0AA4      	INCF       _i, 1
0x006F	0x1903      	BTFSC      STATUS, 2
0x0070	0x0AA5      	INCF       _i+1, 1
;MotorWithLedBlinking.c,39 :: 		}
0x0071	0x2839      	GOTO       L_main4
L_main5:
;MotorWithLedBlinking.c,40 :: 		portb.RB0 = 0;//stop motor
0x0072	0x1006      	BCF        PORTB, 0
;MotorWithLedBlinking.c,41 :: 		portb.RB1 = 0;//with these 2 lines.
0x0073	0x1086      	BCF        PORTB, 1
;MotorWithLedBlinking.c,44 :: 		portb.RB3 = 0;
0x0074	0x1186      	BCF        PORTB, 3
;MotorWithLedBlinking.c,45 :: 		cnt_time = 0;
0x0075	0x01A0      	CLRF       _cnt_time
0x0076	0x01A1      	CLRF       _cnt_time+1
;MotorWithLedBlinking.c,46 :: 		}
0x0077	0x28BE      	GOTO       L_main12
L_main2:
;MotorWithLedBlinking.c,47 :: 		else if (portc.RC1 == 1) {
0x0078	0x1C87      	BTFSS      PORTC, 1
0x0079	0x287D      	GOTO       L_main13
;MotorWithLedBlinking.c,48 :: 		portb.RB0 = 0;//stop motor
0x007A	0x1006      	BCF        PORTB, 0
;MotorWithLedBlinking.c,49 :: 		portb.RB1 = 0;//with these 2 lines
0x007B	0x1086      	BCF        PORTB, 1
;MotorWithLedBlinking.c,50 :: 		}
0x007C	0x28BE      	GOTO       L_main14
L_main13:
;MotorWithLedBlinking.c,51 :: 		else if (portc.RC2 == 1) {
0x007D	0x1D07      	BTFSS      PORTC, 2
0x007E	0x28BE      	GOTO       L_main15
;MotorWithLedBlinking.c,52 :: 		portb.RB0 = 0; //running motor backwards
0x007F	0x1006      	BCF        PORTB, 0
;MotorWithLedBlinking.c,53 :: 		portb.RB1 = 1; //with these 2 lines
0x0080	0x1486      	BSF        PORTB, 1
;MotorWithLedBlinking.c,55 :: 		for (i = 0; i < 400; i++) { // Divide the delay into smaller intervals
0x0081	0x01A4      	CLRF       _i
0x0082	0x01A5      	CLRF       _i+1
L_main16:
0x0083	0x3080      	MOVLW      128
0x0084	0x0625      	XORWF      _i+1, 0
0x0085	0x00F0      	MOVWF      R0
0x0086	0x3080      	MOVLW      128
0x0087	0x3A01      	XORLW      1
0x0088	0x0270      	SUBWF      R0, 0
0x0089	0x1D03      	BTFSS      STATUS, 2
0x008A	0x288D      	GOTO       L__main27
0x008B	0x3090      	MOVLW      144
0x008C	0x0224      	SUBWF      _i, 0
L__main27:
0x008D	0x1803      	BTFSC      STATUS, 0
0x008E	0x28BC      	GOTO       L_main17
;MotorWithLedBlinking.c,56 :: 		delay_ms(50); // Delay for 50 ms
0x008F	0x3082      	MOVLW      130
0x0090	0x00FC      	MOVWF      R12
0x0091	0x30DD      	MOVLW      221
0x0092	0x00FD      	MOVWF      R13
L_main19:
0x0093	0x0BFD      	DECFSZ     R13, 1
0x0094	0x2893      	GOTO       L_main19
0x0095	0x0BFC      	DECFSZ     R12, 1
0x0096	0x2893      	GOTO       L_main19
0x0097	0x0000      	NOP
0x0098	0x0000      	NOP
;MotorWithLedBlinking.c,57 :: 		cnt_time += 50;
0x0099	0x3032      	MOVLW      50
0x009A	0x0720      	ADDWF      _cnt_time, 0
0x009B	0x00F1      	MOVWF      R1
0x009C	0x0821      	MOVF       _cnt_time+1, 0
0x009D	0x1803      	BTFSC      STATUS, 0
0x009E	0x3E01      	ADDLW      1
0x009F	0x00F2      	MOVWF      R1+1
0x00A0	0x0871      	MOVF       R1, 0
0x00A1	0x00A0      	MOVWF      _cnt_time
0x00A2	0x0872      	MOVF       R1+1, 0
0x00A3	0x00A1      	MOVWF      _cnt_time+1
;MotorWithLedBlinking.c,58 :: 		if (cnt_time == 500) {
0x00A4	0x0872      	MOVF       R1+1, 0
0x00A5	0x3A01      	XORLW      1
0x00A6	0x1D03      	BTFSS      STATUS, 2
0x00A7	0x28AA      	GOTO       L__main28
0x00A8	0x30F4      	MOVLW      244
0x00A9	0x0671      	XORWF      R1, 0
L__main28:
0x00AA	0x1D03      	BTFSS      STATUS, 2
0x00AB	0x28B3      	GOTO       L_main20
;MotorWithLedBlinking.c,59 :: 		if (portb.RB3 == 1) {
0x00AC	0x1D86      	BTFSS      PORTB, 3
0x00AD	0x28B0      	GOTO       L_main21
;MotorWithLedBlinking.c,60 :: 		portb.RB3 = 0;
0x00AE	0x1186      	BCF        PORTB, 3
;MotorWithLedBlinking.c,61 :: 		} else {
0x00AF	0x28B1      	GOTO       L_main22
L_main21:
;MotorWithLedBlinking.c,62 :: 		portb.RB3 = 1;
0x00B0	0x1586      	BSF        PORTB, 3
;MotorWithLedBlinking.c,63 :: 		}
L_main22:
;MotorWithLedBlinking.c,64 :: 		cnt_time = 0;
0x00B1	0x01A0      	CLRF       _cnt_time
0x00B2	0x01A1      	CLRF       _cnt_time+1
;MotorWithLedBlinking.c,65 :: 		}
L_main20:
;MotorWithLedBlinking.c,66 :: 		if (portc.RC1 == 1) {
0x00B3	0x1C87      	BTFSS      PORTC, 1
0x00B4	0x28B8      	GOTO       L_main23
;MotorWithLedBlinking.c,67 :: 		portb.RB0 = 0; // Stop motor immediately
0x00B5	0x1006      	BCF        PORTB, 0
;MotorWithLedBlinking.c,68 :: 		portb.RB1 = 0;
0x00B6	0x1086      	BCF        PORTB, 1
;MotorWithLedBlinking.c,69 :: 		break; // Exit the loop
0x00B7	0x28BC      	GOTO       L_main17
;MotorWithLedBlinking.c,70 :: 		}
L_main23:
;MotorWithLedBlinking.c,55 :: 		for (i = 0; i < 400; i++) { // Divide the delay into smaller intervals
0x00B8	0x0AA4      	INCF       _i, 1
0x00B9	0x1903      	BTFSC      STATUS, 2
0x00BA	0x0AA5      	INCF       _i+1, 1
;MotorWithLedBlinking.c,71 :: 		}
0x00BB	0x2883      	GOTO       L_main16
L_main17:
;MotorWithLedBlinking.c,72 :: 		portb.RB0 = 0;//stop motor
0x00BC	0x1006      	BCF        PORTB, 0
;MotorWithLedBlinking.c,73 :: 		portb.RB1 = 0;//with these 2 lines.
0x00BD	0x1086      	BCF        PORTB, 1
;MotorWithLedBlinking.c,74 :: 		}
L_main15:
L_main14:
L_main12:
;MotorWithLedBlinking.c,75 :: 		}
0x00BE	0x2823      	GOTO       L_main0
;MotorWithLedBlinking.c,76 :: 		}
L_end_main:
0x00BF	0x28BF      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003       [7]    _____DoICP
0x000A      [12]    ___CC2DW
0x0016     [170]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x000A       [1]    PCLATH
0x0020       [2]    _cnt_time
0x0022       [2]    ___DoICPAddr
0x0024       [2]    _i
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0086       [1]    TRISB
0x0087       [1]    TRISC
